#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const pjson = require('../package.json');
const config = require('../src/config');
const pd = require('../src/pagerduty');
const reminder = require('../src/reminder');

function runCheck(arg, cmd){
  if (!cmd) {
    // if an argument is supplied to the function, we get arg, cmd arguments; otherwise, just cmd
    cmd = arg;
  }
  if (!cmd.config) {
    cmd.help();
  }
  fs.access(cmd.config, fs.constants.F_OK, (err) => {
    if (err) throw err;
    config.setupConfig(cmd.config, (configErr) => {
      if (configErr) {
        console.error(configErr);
        process.exit(1);
      }
      pd.checkSchedulesIds((checkError, res) => {
        if (checkError) {
          console.error('Check failed with error:', checkError);
          process.exit(1);
        }
        if (!res) {
          console.error('Check failed - empty response');
          process.exit(1);
        } else {
          console.log('Config schedule IDs passed.');
          pd.processSchedulesFromConfig((error, msg) => {
            if (error) {
              console.error('Error while processing schedules from config', error);
              process.exit(1);
            }
            console.log(msg);
            process.exit(0);
          });
        }
      });
    });
  });
}

function sendReminder(arg, cmd){
  if (!cmd) {
    // if an argument is supplied to the function, we get arg, cmd arguments; otherwise, just cmd
    cmd = arg;
  }
  if (!cmd.schedule ||
    !cmd.escalationPolicy ||
    !cmd.config) {
      cmd.help();
  }
  fs.access(cmd.config, fs.constants.F_OK, (err) => {
    if (err) throw err;
    config.setupConfig(cmd.config, (configErr) => {
      if (configErr) {
        console.error(configErr);
        process.exit(1);
      }
      const handoverData = {
        schedule: cmd.schedule,
        escalationPolicy: cmd.escalationPolicy,
        templateText: cmd.templateText,
        slackChannel: cmd.channel
      }
      reminder.sendMessage(handoverData, cmd.type, (err) => {
        if (err) {
          console.error(err);
          process.exit(1);
        }
      });
    });
  });
}

program
  .command('check')
  .description('Check PagerDuty Overlaps')
  .usage('check --config <path/to/config.json>')
  .option('-c, --config <path-to-config>', 'Path to config.json')
  .action(runCheck);

program
  .command('reminder')
  .description('Send schedule reminder message')
  .option('-c, --config <path-to-config>', 'Path to config.json')
  .option('-s, --schedule <schedule-id>', 'PagerDuty schedule ID')
  .option('-e, --escalation-policy <escalation-policy-id>', 'PagerDuty escalation policy ID')
  .option('-n, --channel <slack-channel-name>', 'Slack channel to send the handover message to')
  .option('-x, --template-text <template-text>', 'Template text')
  .option('-t, --type <reminder-type>', 'Type of the reminder message (reminder/handover), default: handover')
  .action(sendReminder);

  program
  .version(pjson.version)
  .parse(process.argv);

// default help
if (!program.args.length) program.help();
